export function createContext(initialState = {}) {
    const dom = {
        body: document.body,
        rootElement: document.documentElement,
        content: document.getElementById('content'),
        fileName: document.getElementById('file-name'),
        sidebarPath: document.getElementById('sidebar-path'),
        statusMessage: document.getElementById('status-message'),
        fileList: document.getElementById('file-list'),
        downloadButton: document.getElementById('download-button'),
        deleteButton: document.getElementById('delete-button'),
        editButton: document.getElementById('edit-button'),
        previewButton: document.getElementById('preview-button'),
        saveButton: document.getElementById('save-button'),
        cancelButton: document.getElementById('cancel-button'),
        editorContainer: document.getElementById('editor-container'),
        offlineOverlay: document.getElementById('offline-overlay'),
        unsavedChangesModal: document.getElementById('unsaved-changes-modal'),
        unsavedChangesFilename: document.getElementById('unsaved-changes-filename'),
        unsavedChangesMessage: document.getElementById('unsaved-changes-message'),
        unsavedChangesDetail: document.getElementById('unsaved-changes-detail'),
        unsavedChangesSaveButton: document.getElementById('unsaved-changes-save'),
        unsavedChangesDiscardButton: document.getElementById('unsaved-changes-discard'),
        unsavedChangesCancelButton: document.getElementById('unsaved-changes-cancel'),
        tocList: document.getElementById('toc-list'),
        tocSidebar: document.querySelector('.sidebar--toc'),
        fileSidebar: document.querySelector('.sidebar--files'),
        tocSplitter: document.getElementById('toc-splitter'),
        fileSplitter: document.getElementById('file-splitter'),
        dockviewRoot: document.getElementById('dockview-root'),
        appShell: document.querySelector('.app-shell'),
        viewerSection: document.querySelector('.viewer'),
        terminalPanel: document.getElementById('terminal-panel'),
        terminalContainer: document.getElementById('terminal-container'),
        terminalToggleButton: document.getElementById('terminal-toggle'),
        terminalStatusText: document.getElementById('terminal-status'),
        terminalResizeHandle: document.getElementById('terminal-resize-handle'),
    };

    const panelToggleButtons = Array.from(document.querySelectorAll('[data-panel-toggle]'));

    const context = {
        initialState,
        dom,
        panelToggleButtons,
        panelToggleButtonMap: new Map(),
        originalPathArgument: initialState.pathArgument || '',
        resolvedRootPath: initialState.rootPath || '',
        currentFile: initialState.selectedFile || null,
        files: [],
        fileTree: [],
        websocket: null,
        reconnectTimer: null,
        isEditing: false,
        isPreviewing: false,
        editorInstance: null,
        draftContent: '',
        currentContent: typeof initialState.content === 'string' ? initialState.content : '',
        hasPendingChanges: false,
        suppressEditorChangeEvents: false,
        activeUnsavedPrompt: null,
        initialFilesValue: initialState.files,
        initialTreeValue: initialState.fileTree,
        initialFileFromLocation: null,
        textEncoder: new TextEncoder(),
        textDecoder: new TextDecoder(),
        terminalDecoder: new TextDecoder(),
        markedConfigured: false,
        mermaidInitAttempted: false,
        mermaidRetryTimer: null,
        vegaRetryTimer: null,
        excalidrawRetryTimer: null,
        mermaidIdCounter: 0,
        vegaIdCounter: 0,
        excalidrawIdCounter: 0,
        excalidrawRoots: new Map(),
        excalidrawResizeHandlerAttached: false,
        excalidrawFitFailureLogged: false,
        librariesReadyPromise: null,
        pendingMarkdown: null,
        relativeLinksEnabled: false,
        relativeLinkBasePath: '',
        relativeLinkBaseWalker: null,
        relativeLinkExtensionRegistered: false,
        headingLocationMap: new Map(),
        headingHighlightLine: null,
        headingHighlightTimeout: null,
        activeHeadingCollection: null,
        documentSlugCounts: null,
        expandedDirectories: new Set(),
        knownDirectories: new Set(),
        dockviewSetup: null,
        dockviewIsActive: false,
        terminalInstance: null,
        terminalFitAddon: null,
        terminalSocket: null,
        terminalReconnectTimer: null,
        terminalLibraryRetryTimer: null,
        terminalCollapsed: false,
        terminalHeight: null,
        pendingTerminalFitFrame: null,
        terminalResizeObserver: null,
        terminalLastStatusMessage: '',
        relativeLinkDummyOrigin: 'http://__dummy__/',
        relativeLinkSchemePattern: /^[a-zA-Z][\w+.-]*:/,
        relativeLinkProtocolRelativePattern: /^\/\//,
        terminalStorageKey: 'terminalPanelHeight',
    };

    return context;
}
